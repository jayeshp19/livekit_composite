/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_LIVEKIT_LIVEKIT_RTC_PB_H_INCLUDED
#define PB_LIVEKIT_LIVEKIT_RTC_PB_H_INCLUDED
#include <pb.h>
#include "livekit_models.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum livekit_signal_target {
    LIVEKIT_SIGNAL_TARGET_PUBLISHER = 0,
    LIVEKIT_SIGNAL_TARGET_SUBSCRIBER = 1
} livekit_signal_target_t;

typedef enum livekit_stream_state {
    LIVEKIT_STREAM_STATE_ACTIVE = 0,
    LIVEKIT_STREAM_STATE_PAUSED = 1
} livekit_stream_state_t;

typedef enum livekit_candidate_protocol {
    LIVEKIT_CANDIDATE_PROTOCOL_UDP = 0,
    LIVEKIT_CANDIDATE_PROTOCOL_TCP = 1,
    LIVEKIT_CANDIDATE_PROTOCOL_TLS = 2
} livekit_candidate_protocol_t;

/* indicates action clients should take on receiving this message */
typedef enum livekit_leave_request_action {
    LIVEKIT_LEAVE_REQUEST_ACTION_DISCONNECT = 0, /* should disconnect */
    LIVEKIT_LEAVE_REQUEST_ACTION_RESUME = 1, /* should attempt a resume with `reconnect=1` in join URL */
    LIVEKIT_LEAVE_REQUEST_ACTION_RECONNECT = 2 /* should attempt a reconnect, i. e. no `reconnect=1` */
} livekit_leave_request_action_t;

typedef enum livekit_request_response_reason {
    LIVEKIT_REQUEST_RESPONSE_REASON_OK = 0,
    LIVEKIT_REQUEST_RESPONSE_REASON_NOT_FOUND = 1,
    LIVEKIT_REQUEST_RESPONSE_REASON_NOT_ALLOWED = 2,
    LIVEKIT_REQUEST_RESPONSE_REASON_LIMIT_EXCEEDED = 3
} livekit_request_response_reason_t;

/* Struct definitions */
typedef struct livekit_simulcast_codec {
    pb_callback_t codec;
    pb_callback_t cid;
} livekit_simulcast_codec_t;

typedef struct livekit_add_track_request {
    /* client ID of track, to match it when RTC track is received */
    pb_callback_t cid;
    pb_callback_t name;
    livekit_track_type_t type;
    /* to be deprecated in favor of layers */
    uint32_t width;
    uint32_t height;
    /* true to add track and initialize to muted */
    bool muted;
    livekit_track_source_t source;
    pb_callback_t layers;
    pb_callback_t simulcast_codecs;
    /* server ID of track, publish new codec to exist track */
    pb_callback_t sid;
    /* true if RED (Redundant Encoding) is disabled for audio */
    bool disable_red;
    livekit_encryption_type_t encryption;
    /* which stream the track belongs to, used to group tracks together.
 if not specified, server will infer it from track source to bundle camera/microphone, screenshare/audio together */
    pb_callback_t stream;
    livekit_backup_codec_policy_t backup_codec_policy;
    pb_callback_t audio_features;
} livekit_add_track_request_t;

typedef struct livekit_trickle_request {
    char *candidate_init;
    livekit_signal_target_t target;
    bool final;
} livekit_trickle_request_t;

typedef struct livekit_mute_track_request {
    pb_callback_t sid;
    bool muted;
} livekit_mute_track_request_t;

typedef struct livekit_reconnect_response {
    pb_callback_t ice_servers;
    bool has_client_configuration;
    livekit_client_configuration_t client_configuration;
} livekit_reconnect_response_t;

typedef struct livekit_track_published_response {
    pb_callback_t cid;
    bool has_track;
    livekit_track_info_t track;
} livekit_track_published_response_t;

typedef struct livekit_track_unpublished_response {
    pb_callback_t track_sid;
} livekit_track_unpublished_response_t;

typedef struct livekit_session_description {
    char type[9]; /* "answer" | "offer" | "pranswer" | "rollback" */
    char *sdp;
} livekit_session_description_t;

typedef struct livekit_participant_update {
    pb_callback_t participants;
} livekit_participant_update_t;

typedef struct livekit_update_subscription {
    pb_callback_t track_sids;
    bool subscribe;
    pb_callback_t participant_tracks;
} livekit_update_subscription_t;

typedef struct livekit_update_track_settings {
    pb_callback_t track_sids;
    /* when true, the track is placed in a paused state, with no new data returned */
    bool disabled;
    /* deprecated in favor of width & height */
    livekit_video_quality_t quality;
    /* for video, width to receive */
    uint32_t width;
    /* for video, height to receive */
    uint32_t height;
    uint32_t fps;
    /* subscription priority. 1 being the highest (0 is unset)
 when unset, server sill assign priority based on the order of subscription
 server will use priority in the following ways:
 1. when subscribed tracks exceed per-participant subscription limit, server will
    pause the lowest priority tracks
 2. when the network is congested, server will assign available bandwidth to
    higher priority tracks first. lowest priority tracks can be paused */
    uint32_t priority;
} livekit_update_track_settings_t;

typedef struct livekit_update_local_audio_track {
    pb_callback_t track_sid;
    pb_callback_t features;
} livekit_update_local_audio_track_t;

typedef struct livekit_update_local_video_track {
    pb_callback_t track_sid;
    uint32_t width;
    uint32_t height;
} livekit_update_local_video_track_t;

typedef struct livekit_update_participant_metadata {
    pb_callback_t metadata;
    pb_callback_t name;
    /* attributes to update. it only updates attributes that have been set
 to delete attributes, set the value to an empty string */
    pb_callback_t attributes;
    uint32_t request_id;
} livekit_update_participant_metadata_t;

typedef struct livekit_update_participant_metadata_attributes_entry {
    pb_callback_t key;
    pb_callback_t value;
} livekit_update_participant_metadata_attributes_entry_t;

typedef struct livekit_ice_server {
    pb_size_t urls_count;
    char **urls;
    char *username;
    char *credential;
} livekit_ice_server_t;

typedef struct livekit_join_response {
    livekit_participant_info_t participant;
    pb_size_t ice_servers_count;
    livekit_ice_server_t ice_servers[4];
    /* use subscriber as the primary PeerConnection */
    bool subscriber_primary;
    bool has_client_configuration;
    livekit_client_configuration_t client_configuration;
    int32_t ping_timeout;
    int32_t ping_interval;
} livekit_join_response_t;

typedef struct livekit_speakers_changed {
    pb_callback_t speakers;
} livekit_speakers_changed_t;

typedef struct livekit_room_update {
    bool has_room;
    livekit_room_t room;
} livekit_room_update_t;

typedef struct livekit_connection_quality_info {
    pb_callback_t participant_sid;
    livekit_connection_quality_t quality;
    float score;
} livekit_connection_quality_info_t;

typedef struct livekit_connection_quality_update {
    pb_callback_t updates;
} livekit_connection_quality_update_t;

typedef struct livekit_stream_state_info {
    pb_callback_t participant_sid;
    pb_callback_t track_sid;
    livekit_stream_state_t state;
} livekit_stream_state_info_t;

typedef struct livekit_stream_state_update {
    pb_callback_t stream_states;
} livekit_stream_state_update_t;

typedef struct livekit_subscribed_quality {
    livekit_video_quality_t quality;
    bool enabled;
} livekit_subscribed_quality_t;

typedef struct livekit_subscribed_codec {
    pb_callback_t codec;
    pb_callback_t qualities;
} livekit_subscribed_codec_t;

typedef struct livekit_subscribed_quality_update {
    pb_callback_t track_sid;
    pb_callback_t subscribed_qualities;
    pb_callback_t subscribed_codecs;
} livekit_subscribed_quality_update_t;

typedef struct livekit_track_permission {
    /* permission could be granted either by participant sid or identity */
    pb_callback_t participant_sid;
    bool all_tracks;
    pb_callback_t track_sids;
    pb_callback_t participant_identity;
} livekit_track_permission_t;

typedef struct livekit_subscription_permission {
    bool all_participants;
    pb_callback_t track_permissions;
} livekit_subscription_permission_t;

typedef struct livekit_subscription_permission_update {
    pb_callback_t participant_sid;
    pb_callback_t track_sid;
    bool allowed;
} livekit_subscription_permission_update_t;

typedef struct livekit_room_moved_response {
    /* information about the new room */
    bool has_room;
    livekit_room_t room;
    /* new reconnect token that can be used to reconnect to the new room */
    pb_callback_t token;
    bool has_participant;
    livekit_participant_info_t participant;
    pb_callback_t other_participants;
} livekit_room_moved_response_t;

typedef struct livekit_sync_state {
    /* last subscribe answer before reconnecting */
    bool has_answer;
    livekit_session_description_t answer;
    bool has_subscription;
    livekit_update_subscription_t subscription;
    pb_callback_t publish_tracks;
    pb_callback_t data_channels;
    /* last received server side offer before reconnecting */
    bool has_offer;
    livekit_session_description_t offer;
    pb_callback_t track_sids_disabled;
} livekit_sync_state_t;

typedef struct livekit_data_channel_info {
    pb_callback_t label;
    uint32_t id;
    livekit_signal_target_t target;
} livekit_data_channel_info_t;

typedef struct livekit_simulate_scenario {
    pb_size_t which_scenario;
    union {
        /* simulate N seconds of speaker activity */
        int32_t speaker_update;
        /* simulate local node failure */
        bool node_failure;
        /* simulate migration */
        bool migration;
        /* server to send leave */
        bool server_leave;
        /* switch candidate protocol to tcp */
        livekit_candidate_protocol_t switch_candidate_protocol;
        /* maximum bandwidth for subscribers, in bps
     when zero, clears artificial bandwidth limit */
        int64_t subscriber_bandwidth;
        /* disconnect signal on resume */
        bool disconnect_signal_on_resume;
        /* disconnect signal on resume before sending any messages from server */
        bool disconnect_signal_on_resume_no_messages;
        /* full reconnect leave request */
        bool leave_request_full_reconnect;
    } scenario;
} livekit_simulate_scenario_t;

typedef struct livekit_ping {
    int64_t timestamp;
    /* rtt in milliseconds calculated by client */
    int64_t rtt;
} livekit_ping_t;

typedef struct livekit_pong {
    /* timestamp field of last received ping request */
    int64_t last_ping_timestamp;
    int64_t timestamp;
} livekit_pong_t;

typedef struct livekit_region_settings {
    pb_callback_t regions;
} livekit_region_settings_t;

typedef struct livekit_leave_request {
    /* sent when server initiates the disconnect due to server-restart
 indicates clients should attempt full-reconnect sequence
 NOTE: `can_reconnect` obsoleted by `action` starting in protocol version 13 */
    bool can_reconnect;
    livekit_disconnect_reason_t reason;
    livekit_leave_request_action_t action;
    bool has_regions;
    livekit_region_settings_t regions;
} livekit_leave_request_t;

typedef struct livekit_signal_request {
    pb_size_t which_message;
    union {
        /* initial join exchange, for publisher */
        livekit_session_description_t offer;
        /* participant answering publisher offer */
        livekit_session_description_t answer;
        livekit_trickle_request_t trickle;
        livekit_add_track_request_t add_track;
        /* mute the participant's published tracks */
        livekit_mute_track_request_t mute;
        /* Subscribe or unsubscribe from tracks */
        livekit_update_subscription_t subscription;
        /* Update settings of subscribed tracks */
        livekit_update_track_settings_t track_setting;
        /* Immediately terminate session */
        livekit_leave_request_t leave;
        /* Update subscriber permissions */
        livekit_subscription_permission_t subscription_permission;
        /* sync client's subscribe state to server during reconnect */
        livekit_sync_state_t sync_state;
        /* Simulate conditions, for client validations */
        livekit_simulate_scenario_t simulate;
        /* client triggered ping to server */
        int64_t ping; /* deprecated by ping_req (message Ping) */
        /* update a participant's own metadata, name, or attributes
     requires canUpdateOwnParticipantMetadata permission */
        livekit_update_participant_metadata_t update_metadata;
        livekit_ping_t ping_req;
        /* Update local audio track settings */
        livekit_update_local_audio_track_t update_audio_track;
        /* Update local video track settings */
        livekit_update_local_video_track_t update_video_track;
    } message;
} livekit_signal_request_t;

typedef struct livekit_region_info {
    pb_callback_t region;
    pb_callback_t url;
    int64_t distance;
} livekit_region_info_t;

typedef struct livekit_subscription_response {
    pb_callback_t track_sid;
    livekit_subscription_error_t err;
} livekit_subscription_response_t;

typedef struct livekit_request_response {
    uint32_t request_id;
    livekit_request_response_reason_t reason;
    pb_callback_t message;
} livekit_request_response_t;

typedef struct livekit_track_subscribed {
    pb_callback_t track_sid;
} livekit_track_subscribed_t;

typedef struct livekit_signal_response {
    pb_size_t which_message;
    union {
        /* sent when join is accepted */
        livekit_join_response_t join;
        /* sent when server answers publisher */
        livekit_session_description_t answer;
        /* sent when server is sending subscriber an offer */
        livekit_session_description_t offer;
        /* sent when an ICE candidate is available */
        livekit_trickle_request_t trickle;
        /* sent when participants in the room has changed */
        livekit_participant_update_t update;
        /* sent to the participant when their track has been published */
        livekit_track_published_response_t track_published;
        /* Immediately terminate session */
        livekit_leave_request_t leave;
        /* server initiated mute */
        livekit_mute_track_request_t mute;
        /* indicates changes to speaker status, including when they've gone to not speaking */
        livekit_speakers_changed_t speakers_changed;
        /* sent when metadata of the room has changed */
        livekit_room_update_t room_update;
        /* when connection quality changed */
        livekit_connection_quality_update_t connection_quality;
        /* when streamed tracks state changed, used to notify when any of the streams were paused due to
     congestion */
        livekit_stream_state_update_t stream_state_update;
        /* when max subscribe quality changed, used by dynamic broadcasting to disable unused layers */
        livekit_subscribed_quality_update_t subscribed_quality_update;
        /* when subscription permission changed */
        livekit_subscription_permission_update_t subscription_permission_update;
        /* update the token the client was using, to prevent an active client from using an expired token */
        pb_callback_t refresh_token;
        /* server initiated track unpublish */
        livekit_track_unpublished_response_t track_unpublished;
        /* respond to ping */
        int64_t pong; /* deprecated by pong_resp (message Pong) */
        /* sent when client reconnects */
        livekit_reconnect_response_t reconnect;
        /* respond to Ping */
        livekit_pong_t pong_resp;
        /* Subscription response, client should not expect any media from this subscription if it fails */
        livekit_subscription_response_t subscription_response;
        /* Response relating to user inititated requests that carry a `request_id` */
        livekit_request_response_t request_response;
        /* notify to the publisher when a published track has been subscribed for the first time */
        livekit_track_subscribed_t track_subscribed;
        /* notify to the participant when they have been moved to a new room */
        livekit_room_moved_response_t room_moved;
    } message;
} livekit_signal_response_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _LIVEKIT_SIGNAL_TARGET_MIN LIVEKIT_SIGNAL_TARGET_PUBLISHER
#define _LIVEKIT_SIGNAL_TARGET_MAX LIVEKIT_SIGNAL_TARGET_SUBSCRIBER
#define _LIVEKIT_SIGNAL_TARGET_ARRAYSIZE ((livekit_signal_target_t)(LIVEKIT_SIGNAL_TARGET_SUBSCRIBER+1))

#define _LIVEKIT_STREAM_STATE_MIN LIVEKIT_STREAM_STATE_ACTIVE
#define _LIVEKIT_STREAM_STATE_MAX LIVEKIT_STREAM_STATE_PAUSED
#define _LIVEKIT_STREAM_STATE_ARRAYSIZE ((livekit_stream_state_t)(LIVEKIT_STREAM_STATE_PAUSED+1))

#define _LIVEKIT_CANDIDATE_PROTOCOL_MIN LIVEKIT_CANDIDATE_PROTOCOL_UDP
#define _LIVEKIT_CANDIDATE_PROTOCOL_MAX LIVEKIT_CANDIDATE_PROTOCOL_TLS
#define _LIVEKIT_CANDIDATE_PROTOCOL_ARRAYSIZE ((livekit_candidate_protocol_t)(LIVEKIT_CANDIDATE_PROTOCOL_TLS+1))

#define _LIVEKIT_LEAVE_REQUEST_ACTION_MIN LIVEKIT_LEAVE_REQUEST_ACTION_DISCONNECT
#define _LIVEKIT_LEAVE_REQUEST_ACTION_MAX LIVEKIT_LEAVE_REQUEST_ACTION_RECONNECT
#define _LIVEKIT_LEAVE_REQUEST_ACTION_ARRAYSIZE ((livekit_leave_request_action_t)(LIVEKIT_LEAVE_REQUEST_ACTION_RECONNECT+1))

#define _LIVEKIT_REQUEST_RESPONSE_REASON_MIN LIVEKIT_REQUEST_RESPONSE_REASON_OK
#define _LIVEKIT_REQUEST_RESPONSE_REASON_MAX LIVEKIT_REQUEST_RESPONSE_REASON_LIMIT_EXCEEDED
#define _LIVEKIT_REQUEST_RESPONSE_REASON_ARRAYSIZE ((livekit_request_response_reason_t)(LIVEKIT_REQUEST_RESPONSE_REASON_LIMIT_EXCEEDED+1))




#define livekit_add_track_request_t_type_ENUMTYPE livekit_track_type_t
#define livekit_add_track_request_t_source_ENUMTYPE livekit_track_source_t
#define livekit_add_track_request_t_encryption_ENUMTYPE livekit_encryption_type_t
#define livekit_add_track_request_t_backup_codec_policy_ENUMTYPE livekit_backup_codec_policy_t
#define livekit_add_track_request_t_audio_features_ENUMTYPE livekit_audio_track_feature_t

#define livekit_trickle_request_t_target_ENUMTYPE livekit_signal_target_t









#define livekit_update_track_settings_t_quality_ENUMTYPE livekit_video_quality_t

#define livekit_update_local_audio_track_t_features_ENUMTYPE livekit_audio_track_feature_t


#define livekit_leave_request_t_reason_ENUMTYPE livekit_disconnect_reason_t
#define livekit_leave_request_t_action_ENUMTYPE livekit_leave_request_action_t






#define livekit_connection_quality_info_t_quality_ENUMTYPE livekit_connection_quality_t


#define livekit_stream_state_info_t_state_ENUMTYPE livekit_stream_state_t


#define livekit_subscribed_quality_t_quality_ENUMTYPE livekit_video_quality_t








#define livekit_data_channel_info_t_target_ENUMTYPE livekit_signal_target_t

#define livekit_simulate_scenario_t_scenario_switch_candidate_protocol_ENUMTYPE livekit_candidate_protocol_t





#define livekit_subscription_response_t_err_ENUMTYPE livekit_subscription_error_t

#define livekit_request_response_t_reason_ENUMTYPE livekit_request_response_reason_t



/* Initializer values for message structs */
#define LIVEKIT_SIGNAL_REQUEST_INIT_DEFAULT      {0, {LIVEKIT_SESSION_DESCRIPTION_INIT_DEFAULT}}
#define LIVEKIT_SIGNAL_RESPONSE_INIT_DEFAULT     {0, {LIVEKIT_JOIN_RESPONSE_INIT_DEFAULT}}
#define LIVEKIT_SIMULCAST_CODEC_INIT_DEFAULT     {{{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_ADD_TRACK_REQUEST_INIT_DEFAULT   {{{NULL}, NULL}, {{NULL}, NULL}, _LIVEKIT_TRACK_TYPE_MIN, 0, 0, 0, _LIVEKIT_TRACK_SOURCE_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, _LIVEKIT_ENCRYPTION_TYPE_MIN, {{NULL}, NULL}, _LIVEKIT_BACKUP_CODEC_POLICY_MIN, {{NULL}, NULL}}
#define LIVEKIT_TRICKLE_REQUEST_INIT_DEFAULT     {NULL, _LIVEKIT_SIGNAL_TARGET_MIN, 0}
#define LIVEKIT_MUTE_TRACK_REQUEST_INIT_DEFAULT  {{{NULL}, NULL}, 0}
#define LIVEKIT_JOIN_RESPONSE_INIT_DEFAULT       {LIVEKIT_PARTICIPANT_INFO_INIT_DEFAULT, 0, {LIVEKIT_ICE_SERVER_INIT_DEFAULT, LIVEKIT_ICE_SERVER_INIT_DEFAULT, LIVEKIT_ICE_SERVER_INIT_DEFAULT, LIVEKIT_ICE_SERVER_INIT_DEFAULT}, 0, false, LIVEKIT_CLIENT_CONFIGURATION_INIT_DEFAULT, 0, 0}
#define LIVEKIT_RECONNECT_RESPONSE_INIT_DEFAULT  {{{NULL}, NULL}, false, LIVEKIT_CLIENT_CONFIGURATION_INIT_DEFAULT}
#define LIVEKIT_TRACK_PUBLISHED_RESPONSE_INIT_DEFAULT {{{NULL}, NULL}, false, LIVEKIT_TRACK_INFO_INIT_DEFAULT}
#define LIVEKIT_TRACK_UNPUBLISHED_RESPONSE_INIT_DEFAULT {{{NULL}, NULL}}
#define LIVEKIT_SESSION_DESCRIPTION_INIT_DEFAULT {"", NULL}
#define LIVEKIT_PARTICIPANT_UPDATE_INIT_DEFAULT  {{{NULL}, NULL}}
#define LIVEKIT_UPDATE_SUBSCRIPTION_INIT_DEFAULT {{{NULL}, NULL}, 0, {{NULL}, NULL}}
#define LIVEKIT_UPDATE_TRACK_SETTINGS_INIT_DEFAULT {{{NULL}, NULL}, 0, _LIVEKIT_VIDEO_QUALITY_MIN, 0, 0, 0, 0}
#define LIVEKIT_UPDATE_LOCAL_AUDIO_TRACK_INIT_DEFAULT {{{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_UPDATE_LOCAL_VIDEO_TRACK_INIT_DEFAULT {{{NULL}, NULL}, 0, 0}
#define LIVEKIT_LEAVE_REQUEST_INIT_DEFAULT       {0, _LIVEKIT_DISCONNECT_REASON_MIN, _LIVEKIT_LEAVE_REQUEST_ACTION_MIN, false, LIVEKIT_REGION_SETTINGS_INIT_DEFAULT}
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_INIT_DEFAULT {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_ATTRIBUTES_ENTRY_INIT_DEFAULT {{{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_ICE_SERVER_INIT_DEFAULT          {0, NULL, NULL, NULL}
#define LIVEKIT_SPEAKERS_CHANGED_INIT_DEFAULT    {{{NULL}, NULL}}
#define LIVEKIT_ROOM_UPDATE_INIT_DEFAULT         {false, LIVEKIT_ROOM_INIT_DEFAULT}
#define LIVEKIT_CONNECTION_QUALITY_INFO_INIT_DEFAULT {{{NULL}, NULL}, _LIVEKIT_CONNECTION_QUALITY_MIN, 0}
#define LIVEKIT_CONNECTION_QUALITY_UPDATE_INIT_DEFAULT {{{NULL}, NULL}}
#define LIVEKIT_STREAM_STATE_INFO_INIT_DEFAULT   {{{NULL}, NULL}, {{NULL}, NULL}, _LIVEKIT_STREAM_STATE_MIN}
#define LIVEKIT_STREAM_STATE_UPDATE_INIT_DEFAULT {{{NULL}, NULL}}
#define LIVEKIT_SUBSCRIBED_QUALITY_INIT_DEFAULT  {_LIVEKIT_VIDEO_QUALITY_MIN, 0}
#define LIVEKIT_SUBSCRIBED_CODEC_INIT_DEFAULT    {{{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_SUBSCRIBED_QUALITY_UPDATE_INIT_DEFAULT {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_TRACK_PERMISSION_INIT_DEFAULT    {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_SUBSCRIPTION_PERMISSION_INIT_DEFAULT {0, {{NULL}, NULL}}
#define LIVEKIT_SUBSCRIPTION_PERMISSION_UPDATE_INIT_DEFAULT {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define LIVEKIT_ROOM_MOVED_RESPONSE_INIT_DEFAULT {false, LIVEKIT_ROOM_INIT_DEFAULT, {{NULL}, NULL}, false, LIVEKIT_PARTICIPANT_INFO_INIT_DEFAULT, {{NULL}, NULL}}
#define LIVEKIT_SYNC_STATE_INIT_DEFAULT          {false, LIVEKIT_SESSION_DESCRIPTION_INIT_DEFAULT, false, LIVEKIT_UPDATE_SUBSCRIPTION_INIT_DEFAULT, {{NULL}, NULL}, {{NULL}, NULL}, false, LIVEKIT_SESSION_DESCRIPTION_INIT_DEFAULT, {{NULL}, NULL}}
#define LIVEKIT_DATA_CHANNEL_INFO_INIT_DEFAULT   {{{NULL}, NULL}, 0, _LIVEKIT_SIGNAL_TARGET_MIN}
#define LIVEKIT_SIMULATE_SCENARIO_INIT_DEFAULT   {0, {0}}
#define LIVEKIT_PING_INIT_DEFAULT                {0, 0}
#define LIVEKIT_PONG_INIT_DEFAULT                {0, 0}
#define LIVEKIT_REGION_SETTINGS_INIT_DEFAULT     {{{NULL}, NULL}}
#define LIVEKIT_REGION_INFO_INIT_DEFAULT         {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define LIVEKIT_SUBSCRIPTION_RESPONSE_INIT_DEFAULT {{{NULL}, NULL}, _LIVEKIT_SUBSCRIPTION_ERROR_MIN}
#define LIVEKIT_REQUEST_RESPONSE_INIT_DEFAULT    {0, _LIVEKIT_REQUEST_RESPONSE_REASON_MIN, {{NULL}, NULL}}
#define LIVEKIT_TRACK_SUBSCRIBED_INIT_DEFAULT    {{{NULL}, NULL}}
#define LIVEKIT_SIGNAL_REQUEST_INIT_ZERO         {0, {LIVEKIT_SESSION_DESCRIPTION_INIT_ZERO}}
#define LIVEKIT_SIGNAL_RESPONSE_INIT_ZERO        {0, {LIVEKIT_JOIN_RESPONSE_INIT_ZERO}}
#define LIVEKIT_SIMULCAST_CODEC_INIT_ZERO        {{{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_ADD_TRACK_REQUEST_INIT_ZERO      {{{NULL}, NULL}, {{NULL}, NULL}, _LIVEKIT_TRACK_TYPE_MIN, 0, 0, 0, _LIVEKIT_TRACK_SOURCE_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, _LIVEKIT_ENCRYPTION_TYPE_MIN, {{NULL}, NULL}, _LIVEKIT_BACKUP_CODEC_POLICY_MIN, {{NULL}, NULL}}
#define LIVEKIT_TRICKLE_REQUEST_INIT_ZERO        {NULL, _LIVEKIT_SIGNAL_TARGET_MIN, 0}
#define LIVEKIT_MUTE_TRACK_REQUEST_INIT_ZERO     {{{NULL}, NULL}, 0}
#define LIVEKIT_JOIN_RESPONSE_INIT_ZERO          {LIVEKIT_PARTICIPANT_INFO_INIT_ZERO, 0, {LIVEKIT_ICE_SERVER_INIT_ZERO, LIVEKIT_ICE_SERVER_INIT_ZERO, LIVEKIT_ICE_SERVER_INIT_ZERO, LIVEKIT_ICE_SERVER_INIT_ZERO}, 0, false, LIVEKIT_CLIENT_CONFIGURATION_INIT_ZERO, 0, 0}
#define LIVEKIT_RECONNECT_RESPONSE_INIT_ZERO     {{{NULL}, NULL}, false, LIVEKIT_CLIENT_CONFIGURATION_INIT_ZERO}
#define LIVEKIT_TRACK_PUBLISHED_RESPONSE_INIT_ZERO {{{NULL}, NULL}, false, LIVEKIT_TRACK_INFO_INIT_ZERO}
#define LIVEKIT_TRACK_UNPUBLISHED_RESPONSE_INIT_ZERO {{{NULL}, NULL}}
#define LIVEKIT_SESSION_DESCRIPTION_INIT_ZERO    {"", NULL}
#define LIVEKIT_PARTICIPANT_UPDATE_INIT_ZERO     {{{NULL}, NULL}}
#define LIVEKIT_UPDATE_SUBSCRIPTION_INIT_ZERO    {{{NULL}, NULL}, 0, {{NULL}, NULL}}
#define LIVEKIT_UPDATE_TRACK_SETTINGS_INIT_ZERO  {{{NULL}, NULL}, 0, _LIVEKIT_VIDEO_QUALITY_MIN, 0, 0, 0, 0}
#define LIVEKIT_UPDATE_LOCAL_AUDIO_TRACK_INIT_ZERO {{{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_UPDATE_LOCAL_VIDEO_TRACK_INIT_ZERO {{{NULL}, NULL}, 0, 0}
#define LIVEKIT_LEAVE_REQUEST_INIT_ZERO          {0, _LIVEKIT_DISCONNECT_REASON_MIN, _LIVEKIT_LEAVE_REQUEST_ACTION_MIN, false, LIVEKIT_REGION_SETTINGS_INIT_ZERO}
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_INIT_ZERO {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_ATTRIBUTES_ENTRY_INIT_ZERO {{{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_ICE_SERVER_INIT_ZERO             {0, NULL, NULL, NULL}
#define LIVEKIT_SPEAKERS_CHANGED_INIT_ZERO       {{{NULL}, NULL}}
#define LIVEKIT_ROOM_UPDATE_INIT_ZERO            {false, LIVEKIT_ROOM_INIT_ZERO}
#define LIVEKIT_CONNECTION_QUALITY_INFO_INIT_ZERO {{{NULL}, NULL}, _LIVEKIT_CONNECTION_QUALITY_MIN, 0}
#define LIVEKIT_CONNECTION_QUALITY_UPDATE_INIT_ZERO {{{NULL}, NULL}}
#define LIVEKIT_STREAM_STATE_INFO_INIT_ZERO      {{{NULL}, NULL}, {{NULL}, NULL}, _LIVEKIT_STREAM_STATE_MIN}
#define LIVEKIT_STREAM_STATE_UPDATE_INIT_ZERO    {{{NULL}, NULL}}
#define LIVEKIT_SUBSCRIBED_QUALITY_INIT_ZERO     {_LIVEKIT_VIDEO_QUALITY_MIN, 0}
#define LIVEKIT_SUBSCRIBED_CODEC_INIT_ZERO       {{{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_SUBSCRIBED_QUALITY_UPDATE_INIT_ZERO {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_TRACK_PERMISSION_INIT_ZERO       {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define LIVEKIT_SUBSCRIPTION_PERMISSION_INIT_ZERO {0, {{NULL}, NULL}}
#define LIVEKIT_SUBSCRIPTION_PERMISSION_UPDATE_INIT_ZERO {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define LIVEKIT_ROOM_MOVED_RESPONSE_INIT_ZERO    {false, LIVEKIT_ROOM_INIT_ZERO, {{NULL}, NULL}, false, LIVEKIT_PARTICIPANT_INFO_INIT_ZERO, {{NULL}, NULL}}
#define LIVEKIT_SYNC_STATE_INIT_ZERO             {false, LIVEKIT_SESSION_DESCRIPTION_INIT_ZERO, false, LIVEKIT_UPDATE_SUBSCRIPTION_INIT_ZERO, {{NULL}, NULL}, {{NULL}, NULL}, false, LIVEKIT_SESSION_DESCRIPTION_INIT_ZERO, {{NULL}, NULL}}
#define LIVEKIT_DATA_CHANNEL_INFO_INIT_ZERO      {{{NULL}, NULL}, 0, _LIVEKIT_SIGNAL_TARGET_MIN}
#define LIVEKIT_SIMULATE_SCENARIO_INIT_ZERO      {0, {0}}
#define LIVEKIT_PING_INIT_ZERO                   {0, 0}
#define LIVEKIT_PONG_INIT_ZERO                   {0, 0}
#define LIVEKIT_REGION_SETTINGS_INIT_ZERO        {{{NULL}, NULL}}
#define LIVEKIT_REGION_INFO_INIT_ZERO            {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define LIVEKIT_SUBSCRIPTION_RESPONSE_INIT_ZERO  {{{NULL}, NULL}, _LIVEKIT_SUBSCRIPTION_ERROR_MIN}
#define LIVEKIT_REQUEST_RESPONSE_INIT_ZERO       {0, _LIVEKIT_REQUEST_RESPONSE_REASON_MIN, {{NULL}, NULL}}
#define LIVEKIT_TRACK_SUBSCRIBED_INIT_ZERO       {{{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define LIVEKIT_SIMULCAST_CODEC_CODEC_TAG        1
#define LIVEKIT_SIMULCAST_CODEC_CID_TAG          2
#define LIVEKIT_ADD_TRACK_REQUEST_CID_TAG        1
#define LIVEKIT_ADD_TRACK_REQUEST_NAME_TAG       2
#define LIVEKIT_ADD_TRACK_REQUEST_TYPE_TAG       3
#define LIVEKIT_ADD_TRACK_REQUEST_WIDTH_TAG      4
#define LIVEKIT_ADD_TRACK_REQUEST_HEIGHT_TAG     5
#define LIVEKIT_ADD_TRACK_REQUEST_MUTED_TAG      6
#define LIVEKIT_ADD_TRACK_REQUEST_SOURCE_TAG     8
#define LIVEKIT_ADD_TRACK_REQUEST_LAYERS_TAG     9
#define LIVEKIT_ADD_TRACK_REQUEST_SIMULCAST_CODECS_TAG 10
#define LIVEKIT_ADD_TRACK_REQUEST_SID_TAG        11
#define LIVEKIT_ADD_TRACK_REQUEST_DISABLE_RED_TAG 13
#define LIVEKIT_ADD_TRACK_REQUEST_ENCRYPTION_TAG 14
#define LIVEKIT_ADD_TRACK_REQUEST_STREAM_TAG     15
#define LIVEKIT_ADD_TRACK_REQUEST_BACKUP_CODEC_POLICY_TAG 16
#define LIVEKIT_ADD_TRACK_REQUEST_AUDIO_FEATURES_TAG 17
#define LIVEKIT_TRICKLE_REQUEST_CANDIDATE_INIT_TAG 1
#define LIVEKIT_TRICKLE_REQUEST_TARGET_TAG       2
#define LIVEKIT_TRICKLE_REQUEST_FINAL_TAG        3
#define LIVEKIT_MUTE_TRACK_REQUEST_SID_TAG       1
#define LIVEKIT_MUTE_TRACK_REQUEST_MUTED_TAG     2
#define LIVEKIT_RECONNECT_RESPONSE_ICE_SERVERS_TAG 1
#define LIVEKIT_RECONNECT_RESPONSE_CLIENT_CONFIGURATION_TAG 2
#define LIVEKIT_TRACK_PUBLISHED_RESPONSE_CID_TAG 1
#define LIVEKIT_TRACK_PUBLISHED_RESPONSE_TRACK_TAG 2
#define LIVEKIT_TRACK_UNPUBLISHED_RESPONSE_TRACK_SID_TAG 1
#define LIVEKIT_SESSION_DESCRIPTION_TYPE_TAG     1
#define LIVEKIT_SESSION_DESCRIPTION_SDP_TAG      2
#define LIVEKIT_PARTICIPANT_UPDATE_PARTICIPANTS_TAG 1
#define LIVEKIT_UPDATE_SUBSCRIPTION_TRACK_SIDS_TAG 1
#define LIVEKIT_UPDATE_SUBSCRIPTION_SUBSCRIBE_TAG 2
#define LIVEKIT_UPDATE_SUBSCRIPTION_PARTICIPANT_TRACKS_TAG 3
#define LIVEKIT_UPDATE_TRACK_SETTINGS_TRACK_SIDS_TAG 1
#define LIVEKIT_UPDATE_TRACK_SETTINGS_DISABLED_TAG 3
#define LIVEKIT_UPDATE_TRACK_SETTINGS_QUALITY_TAG 4
#define LIVEKIT_UPDATE_TRACK_SETTINGS_WIDTH_TAG  5
#define LIVEKIT_UPDATE_TRACK_SETTINGS_HEIGHT_TAG 6
#define LIVEKIT_UPDATE_TRACK_SETTINGS_FPS_TAG    7
#define LIVEKIT_UPDATE_TRACK_SETTINGS_PRIORITY_TAG 8
#define LIVEKIT_UPDATE_LOCAL_AUDIO_TRACK_TRACK_SID_TAG 1
#define LIVEKIT_UPDATE_LOCAL_AUDIO_TRACK_FEATURES_TAG 2
#define LIVEKIT_UPDATE_LOCAL_VIDEO_TRACK_TRACK_SID_TAG 1
#define LIVEKIT_UPDATE_LOCAL_VIDEO_TRACK_WIDTH_TAG 2
#define LIVEKIT_UPDATE_LOCAL_VIDEO_TRACK_HEIGHT_TAG 3
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_METADATA_TAG 1
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_NAME_TAG 2
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_ATTRIBUTES_TAG 3
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_REQUEST_ID_TAG 4
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_ATTRIBUTES_ENTRY_KEY_TAG 1
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_ATTRIBUTES_ENTRY_VALUE_TAG 2
#define LIVEKIT_ICE_SERVER_URLS_TAG              1
#define LIVEKIT_ICE_SERVER_USERNAME_TAG          2
#define LIVEKIT_ICE_SERVER_CREDENTIAL_TAG        3
#define LIVEKIT_JOIN_RESPONSE_PARTICIPANT_TAG    2
#define LIVEKIT_JOIN_RESPONSE_ICE_SERVERS_TAG    5
#define LIVEKIT_JOIN_RESPONSE_SUBSCRIBER_PRIMARY_TAG 6
#define LIVEKIT_JOIN_RESPONSE_CLIENT_CONFIGURATION_TAG 8
#define LIVEKIT_JOIN_RESPONSE_PING_TIMEOUT_TAG   10
#define LIVEKIT_JOIN_RESPONSE_PING_INTERVAL_TAG  11
#define LIVEKIT_SPEAKERS_CHANGED_SPEAKERS_TAG    1
#define LIVEKIT_ROOM_UPDATE_ROOM_TAG             1
#define LIVEKIT_CONNECTION_QUALITY_INFO_PARTICIPANT_SID_TAG 1
#define LIVEKIT_CONNECTION_QUALITY_INFO_QUALITY_TAG 2
#define LIVEKIT_CONNECTION_QUALITY_INFO_SCORE_TAG 3
#define LIVEKIT_CONNECTION_QUALITY_UPDATE_UPDATES_TAG 1
#define LIVEKIT_STREAM_STATE_INFO_PARTICIPANT_SID_TAG 1
#define LIVEKIT_STREAM_STATE_INFO_TRACK_SID_TAG  2
#define LIVEKIT_STREAM_STATE_INFO_STATE_TAG      3
#define LIVEKIT_STREAM_STATE_UPDATE_STREAM_STATES_TAG 1
#define LIVEKIT_SUBSCRIBED_QUALITY_QUALITY_TAG   1
#define LIVEKIT_SUBSCRIBED_QUALITY_ENABLED_TAG   2
#define LIVEKIT_SUBSCRIBED_CODEC_CODEC_TAG       1
#define LIVEKIT_SUBSCRIBED_CODEC_QUALITIES_TAG   2
#define LIVEKIT_SUBSCRIBED_QUALITY_UPDATE_TRACK_SID_TAG 1
#define LIVEKIT_SUBSCRIBED_QUALITY_UPDATE_SUBSCRIBED_QUALITIES_TAG 2
#define LIVEKIT_SUBSCRIBED_QUALITY_UPDATE_SUBSCRIBED_CODECS_TAG 3
#define LIVEKIT_TRACK_PERMISSION_PARTICIPANT_SID_TAG 1
#define LIVEKIT_TRACK_PERMISSION_ALL_TRACKS_TAG  2
#define LIVEKIT_TRACK_PERMISSION_TRACK_SIDS_TAG  3
#define LIVEKIT_TRACK_PERMISSION_PARTICIPANT_IDENTITY_TAG 4
#define LIVEKIT_SUBSCRIPTION_PERMISSION_ALL_PARTICIPANTS_TAG 1
#define LIVEKIT_SUBSCRIPTION_PERMISSION_TRACK_PERMISSIONS_TAG 2
#define LIVEKIT_SUBSCRIPTION_PERMISSION_UPDATE_PARTICIPANT_SID_TAG 1
#define LIVEKIT_SUBSCRIPTION_PERMISSION_UPDATE_TRACK_SID_TAG 2
#define LIVEKIT_SUBSCRIPTION_PERMISSION_UPDATE_ALLOWED_TAG 3
#define LIVEKIT_ROOM_MOVED_RESPONSE_ROOM_TAG     1
#define LIVEKIT_ROOM_MOVED_RESPONSE_TOKEN_TAG    2
#define LIVEKIT_ROOM_MOVED_RESPONSE_PARTICIPANT_TAG 3
#define LIVEKIT_ROOM_MOVED_RESPONSE_OTHER_PARTICIPANTS_TAG 4
#define LIVEKIT_SYNC_STATE_ANSWER_TAG            1
#define LIVEKIT_SYNC_STATE_SUBSCRIPTION_TAG      2
#define LIVEKIT_SYNC_STATE_PUBLISH_TRACKS_TAG    3
#define LIVEKIT_SYNC_STATE_DATA_CHANNELS_TAG     4
#define LIVEKIT_SYNC_STATE_OFFER_TAG             5
#define LIVEKIT_SYNC_STATE_TRACK_SIDS_DISABLED_TAG 6
#define LIVEKIT_DATA_CHANNEL_INFO_LABEL_TAG      1
#define LIVEKIT_DATA_CHANNEL_INFO_ID_TAG         2
#define LIVEKIT_DATA_CHANNEL_INFO_TARGET_TAG     3
#define LIVEKIT_SIMULATE_SCENARIO_SPEAKER_UPDATE_TAG 1
#define LIVEKIT_SIMULATE_SCENARIO_NODE_FAILURE_TAG 2
#define LIVEKIT_SIMULATE_SCENARIO_MIGRATION_TAG  3
#define LIVEKIT_SIMULATE_SCENARIO_SERVER_LEAVE_TAG 4
#define LIVEKIT_SIMULATE_SCENARIO_SWITCH_CANDIDATE_PROTOCOL_TAG 5
#define LIVEKIT_SIMULATE_SCENARIO_SUBSCRIBER_BANDWIDTH_TAG 6
#define LIVEKIT_SIMULATE_SCENARIO_DISCONNECT_SIGNAL_ON_RESUME_TAG 7
#define LIVEKIT_SIMULATE_SCENARIO_DISCONNECT_SIGNAL_ON_RESUME_NO_MESSAGES_TAG 8
#define LIVEKIT_SIMULATE_SCENARIO_LEAVE_REQUEST_FULL_RECONNECT_TAG 9
#define LIVEKIT_PING_TIMESTAMP_TAG               1
#define LIVEKIT_PING_RTT_TAG                     2
#define LIVEKIT_PONG_LAST_PING_TIMESTAMP_TAG     1
#define LIVEKIT_PONG_TIMESTAMP_TAG               2
#define LIVEKIT_REGION_SETTINGS_REGIONS_TAG      1
#define LIVEKIT_LEAVE_REQUEST_CAN_RECONNECT_TAG  1
#define LIVEKIT_LEAVE_REQUEST_REASON_TAG         2
#define LIVEKIT_LEAVE_REQUEST_ACTION_TAG         3
#define LIVEKIT_LEAVE_REQUEST_REGIONS_TAG        4
#define LIVEKIT_SIGNAL_REQUEST_OFFER_TAG         1
#define LIVEKIT_SIGNAL_REQUEST_ANSWER_TAG        2
#define LIVEKIT_SIGNAL_REQUEST_TRICKLE_TAG       3
#define LIVEKIT_SIGNAL_REQUEST_ADD_TRACK_TAG     4
#define LIVEKIT_SIGNAL_REQUEST_MUTE_TAG          5
#define LIVEKIT_SIGNAL_REQUEST_SUBSCRIPTION_TAG  6
#define LIVEKIT_SIGNAL_REQUEST_TRACK_SETTING_TAG 7
#define LIVEKIT_SIGNAL_REQUEST_LEAVE_TAG         8
#define LIVEKIT_SIGNAL_REQUEST_SUBSCRIPTION_PERMISSION_TAG 11
#define LIVEKIT_SIGNAL_REQUEST_SYNC_STATE_TAG    12
#define LIVEKIT_SIGNAL_REQUEST_SIMULATE_TAG      13
#define LIVEKIT_SIGNAL_REQUEST_PING_TAG          14
#define LIVEKIT_SIGNAL_REQUEST_UPDATE_METADATA_TAG 15
#define LIVEKIT_SIGNAL_REQUEST_PING_REQ_TAG      16
#define LIVEKIT_SIGNAL_REQUEST_UPDATE_AUDIO_TRACK_TAG 17
#define LIVEKIT_SIGNAL_REQUEST_UPDATE_VIDEO_TRACK_TAG 18
#define LIVEKIT_REGION_INFO_REGION_TAG           1
#define LIVEKIT_REGION_INFO_URL_TAG              2
#define LIVEKIT_REGION_INFO_DISTANCE_TAG         3
#define LIVEKIT_SUBSCRIPTION_RESPONSE_TRACK_SID_TAG 1
#define LIVEKIT_SUBSCRIPTION_RESPONSE_ERR_TAG    2
#define LIVEKIT_REQUEST_RESPONSE_REQUEST_ID_TAG  1
#define LIVEKIT_REQUEST_RESPONSE_REASON_TAG      2
#define LIVEKIT_REQUEST_RESPONSE_MESSAGE_TAG     3
#define LIVEKIT_TRACK_SUBSCRIBED_TRACK_SID_TAG   1
#define LIVEKIT_SIGNAL_RESPONSE_JOIN_TAG         1
#define LIVEKIT_SIGNAL_RESPONSE_ANSWER_TAG       2
#define LIVEKIT_SIGNAL_RESPONSE_OFFER_TAG        3
#define LIVEKIT_SIGNAL_RESPONSE_TRICKLE_TAG      4
#define LIVEKIT_SIGNAL_RESPONSE_UPDATE_TAG       5
#define LIVEKIT_SIGNAL_RESPONSE_TRACK_PUBLISHED_TAG 6
#define LIVEKIT_SIGNAL_RESPONSE_LEAVE_TAG        8
#define LIVEKIT_SIGNAL_RESPONSE_MUTE_TAG         9
#define LIVEKIT_SIGNAL_RESPONSE_SPEAKERS_CHANGED_TAG 10
#define LIVEKIT_SIGNAL_RESPONSE_ROOM_UPDATE_TAG  11
#define LIVEKIT_SIGNAL_RESPONSE_CONNECTION_QUALITY_TAG 12
#define LIVEKIT_SIGNAL_RESPONSE_STREAM_STATE_UPDATE_TAG 13
#define LIVEKIT_SIGNAL_RESPONSE_SUBSCRIBED_QUALITY_UPDATE_TAG 14
#define LIVEKIT_SIGNAL_RESPONSE_SUBSCRIPTION_PERMISSION_UPDATE_TAG 15
#define LIVEKIT_SIGNAL_RESPONSE_REFRESH_TOKEN_TAG 16
#define LIVEKIT_SIGNAL_RESPONSE_TRACK_UNPUBLISHED_TAG 17
#define LIVEKIT_SIGNAL_RESPONSE_PONG_TAG         18
#define LIVEKIT_SIGNAL_RESPONSE_RECONNECT_TAG    19
#define LIVEKIT_SIGNAL_RESPONSE_PONG_RESP_TAG    20
#define LIVEKIT_SIGNAL_RESPONSE_SUBSCRIPTION_RESPONSE_TAG 21
#define LIVEKIT_SIGNAL_RESPONSE_REQUEST_RESPONSE_TAG 22
#define LIVEKIT_SIGNAL_RESPONSE_TRACK_SUBSCRIBED_TAG 23
#define LIVEKIT_SIGNAL_RESPONSE_ROOM_MOVED_TAG   24

/* Struct field encoding specification for nanopb */
#define LIVEKIT_SIGNAL_REQUEST_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,offer,message.offer),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,answer,message.answer),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,trickle,message.trickle),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,add_track,message.add_track),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,mute,message.mute),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,subscription,message.subscription),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,track_setting,message.track_setting),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,leave,message.leave),   8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,subscription_permission,message.subscription_permission),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,sync_state,message.sync_state),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,simulate,message.simulate),  13) \
X(a, STATIC,   ONEOF,    INT64,    (message,ping,message.ping),  14) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,update_metadata,message.update_metadata),  15) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,ping_req,message.ping_req),  16) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,update_audio_track,message.update_audio_track),  17) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,update_video_track,message.update_video_track),  18)
#define LIVEKIT_SIGNAL_REQUEST_CALLBACK NULL
#define LIVEKIT_SIGNAL_REQUEST_DEFAULT NULL
#define livekit_signal_request_t_message_offer_MSGTYPE livekit_session_description_t
#define livekit_signal_request_t_message_answer_MSGTYPE livekit_session_description_t
#define livekit_signal_request_t_message_trickle_MSGTYPE livekit_trickle_request_t
#define livekit_signal_request_t_message_add_track_MSGTYPE livekit_add_track_request_t
#define livekit_signal_request_t_message_mute_MSGTYPE livekit_mute_track_request_t
#define livekit_signal_request_t_message_subscription_MSGTYPE livekit_update_subscription_t
#define livekit_signal_request_t_message_track_setting_MSGTYPE livekit_update_track_settings_t
#define livekit_signal_request_t_message_leave_MSGTYPE livekit_leave_request_t
#define livekit_signal_request_t_message_subscription_permission_MSGTYPE livekit_subscription_permission_t
#define livekit_signal_request_t_message_sync_state_MSGTYPE livekit_sync_state_t
#define livekit_signal_request_t_message_simulate_MSGTYPE livekit_simulate_scenario_t
#define livekit_signal_request_t_message_update_metadata_MSGTYPE livekit_update_participant_metadata_t
#define livekit_signal_request_t_message_ping_req_MSGTYPE livekit_ping_t
#define livekit_signal_request_t_message_update_audio_track_MSGTYPE livekit_update_local_audio_track_t
#define livekit_signal_request_t_message_update_video_track_MSGTYPE livekit_update_local_video_track_t

#define LIVEKIT_SIGNAL_RESPONSE_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,join,message.join),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,answer,message.answer),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,offer,message.offer),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,trickle,message.trickle),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,update,message.update),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,track_published,message.track_published),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,leave,message.leave),   8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,mute,message.mute),   9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,speakers_changed,message.speakers_changed),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,room_update,message.room_update),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,connection_quality,message.connection_quality),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,stream_state_update,message.stream_state_update),  13) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,subscribed_quality_update,message.subscribed_quality_update),  14) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,subscription_permission_update,message.subscription_permission_update),  15) \
X(a, CALLBACK, ONEOF,    STRING,   (message,refresh_token,message.refresh_token),  16) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,track_unpublished,message.track_unpublished),  17) \
X(a, STATIC,   ONEOF,    INT64,    (message,pong,message.pong),  18) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,reconnect,message.reconnect),  19) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,pong_resp,message.pong_resp),  20) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,subscription_response,message.subscription_response),  21) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,request_response,message.request_response),  22) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,track_subscribed,message.track_subscribed),  23) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,room_moved,message.room_moved),  24)
#define LIVEKIT_SIGNAL_RESPONSE_CALLBACK pb_default_field_callback
#define LIVEKIT_SIGNAL_RESPONSE_DEFAULT NULL
#define livekit_signal_response_t_message_join_MSGTYPE livekit_join_response_t
#define livekit_signal_response_t_message_answer_MSGTYPE livekit_session_description_t
#define livekit_signal_response_t_message_offer_MSGTYPE livekit_session_description_t
#define livekit_signal_response_t_message_trickle_MSGTYPE livekit_trickle_request_t
#define livekit_signal_response_t_message_update_MSGTYPE livekit_participant_update_t
#define livekit_signal_response_t_message_track_published_MSGTYPE livekit_track_published_response_t
#define livekit_signal_response_t_message_leave_MSGTYPE livekit_leave_request_t
#define livekit_signal_response_t_message_mute_MSGTYPE livekit_mute_track_request_t
#define livekit_signal_response_t_message_speakers_changed_MSGTYPE livekit_speakers_changed_t
#define livekit_signal_response_t_message_room_update_MSGTYPE livekit_room_update_t
#define livekit_signal_response_t_message_connection_quality_MSGTYPE livekit_connection_quality_update_t
#define livekit_signal_response_t_message_stream_state_update_MSGTYPE livekit_stream_state_update_t
#define livekit_signal_response_t_message_subscribed_quality_update_MSGTYPE livekit_subscribed_quality_update_t
#define livekit_signal_response_t_message_subscription_permission_update_MSGTYPE livekit_subscription_permission_update_t
#define livekit_signal_response_t_message_track_unpublished_MSGTYPE livekit_track_unpublished_response_t
#define livekit_signal_response_t_message_reconnect_MSGTYPE livekit_reconnect_response_t
#define livekit_signal_response_t_message_pong_resp_MSGTYPE livekit_pong_t
#define livekit_signal_response_t_message_subscription_response_MSGTYPE livekit_subscription_response_t
#define livekit_signal_response_t_message_request_response_MSGTYPE livekit_request_response_t
#define livekit_signal_response_t_message_track_subscribed_MSGTYPE livekit_track_subscribed_t
#define livekit_signal_response_t_message_room_moved_MSGTYPE livekit_room_moved_response_t

#define LIVEKIT_SIMULCAST_CODEC_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   codec,             1) \
X(a, CALLBACK, SINGULAR, STRING,   cid,               2)
#define LIVEKIT_SIMULCAST_CODEC_CALLBACK pb_default_field_callback
#define LIVEKIT_SIMULCAST_CODEC_DEFAULT NULL

#define LIVEKIT_ADD_TRACK_REQUEST_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   cid,               1) \
X(a, CALLBACK, SINGULAR, STRING,   name,              2) \
X(a, STATIC,   SINGULAR, UENUM,    type,              3) \
X(a, STATIC,   SINGULAR, UINT32,   width,             4) \
X(a, STATIC,   SINGULAR, UINT32,   height,            5) \
X(a, STATIC,   SINGULAR, BOOL,     muted,             6) \
X(a, STATIC,   SINGULAR, UENUM,    source,            8) \
X(a, CALLBACK, REPEATED, MESSAGE,  layers,            9) \
X(a, CALLBACK, REPEATED, MESSAGE,  simulcast_codecs,  10) \
X(a, CALLBACK, SINGULAR, STRING,   sid,              11) \
X(a, STATIC,   SINGULAR, BOOL,     disable_red,      13) \
X(a, STATIC,   SINGULAR, UENUM,    encryption,       14) \
X(a, CALLBACK, SINGULAR, STRING,   stream,           15) \
X(a, STATIC,   SINGULAR, UENUM,    backup_codec_policy,  16) \
X(a, CALLBACK, REPEATED, UENUM,    audio_features,   17)
#define LIVEKIT_ADD_TRACK_REQUEST_CALLBACK pb_default_field_callback
#define LIVEKIT_ADD_TRACK_REQUEST_DEFAULT NULL
#define livekit_add_track_request_t_layers_MSGTYPE livekit_video_layer_t
#define livekit_add_track_request_t_simulcast_codecs_MSGTYPE livekit_simulcast_codec_t

#define LIVEKIT_TRICKLE_REQUEST_FIELDLIST(X, a) \
X(a, POINTER,  SINGULAR, STRING,   candidate_init,    1) \
X(a, STATIC,   SINGULAR, UENUM,    target,            2) \
X(a, STATIC,   SINGULAR, BOOL,     final,             3)
#define LIVEKIT_TRICKLE_REQUEST_CALLBACK NULL
#define LIVEKIT_TRICKLE_REQUEST_DEFAULT NULL

#define LIVEKIT_MUTE_TRACK_REQUEST_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   sid,               1) \
X(a, STATIC,   SINGULAR, BOOL,     muted,             2)
#define LIVEKIT_MUTE_TRACK_REQUEST_CALLBACK pb_default_field_callback
#define LIVEKIT_MUTE_TRACK_REQUEST_DEFAULT NULL

#define LIVEKIT_JOIN_RESPONSE_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  participant,       2) \
X(a, STATIC,   REPEATED, MESSAGE,  ice_servers,       5) \
X(a, STATIC,   SINGULAR, BOOL,     subscriber_primary,   6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  client_configuration,   8) \
X(a, STATIC,   SINGULAR, INT32,    ping_timeout,     10) \
X(a, STATIC,   SINGULAR, INT32,    ping_interval,    11)
#define LIVEKIT_JOIN_RESPONSE_CALLBACK NULL
#define LIVEKIT_JOIN_RESPONSE_DEFAULT NULL
#define livekit_join_response_t_participant_MSGTYPE livekit_participant_info_t
#define livekit_join_response_t_ice_servers_MSGTYPE livekit_ice_server_t
#define livekit_join_response_t_client_configuration_MSGTYPE livekit_client_configuration_t

#define LIVEKIT_RECONNECT_RESPONSE_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  ice_servers,       1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  client_configuration,   2)
#define LIVEKIT_RECONNECT_RESPONSE_CALLBACK pb_default_field_callback
#define LIVEKIT_RECONNECT_RESPONSE_DEFAULT NULL
#define livekit_reconnect_response_t_ice_servers_MSGTYPE livekit_ice_server_t
#define livekit_reconnect_response_t_client_configuration_MSGTYPE livekit_client_configuration_t

#define LIVEKIT_TRACK_PUBLISHED_RESPONSE_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   cid,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  track,             2)
#define LIVEKIT_TRACK_PUBLISHED_RESPONSE_CALLBACK pb_default_field_callback
#define LIVEKIT_TRACK_PUBLISHED_RESPONSE_DEFAULT NULL
#define livekit_track_published_response_t_track_MSGTYPE livekit_track_info_t

#define LIVEKIT_TRACK_UNPUBLISHED_RESPONSE_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   track_sid,         1)
#define LIVEKIT_TRACK_UNPUBLISHED_RESPONSE_CALLBACK pb_default_field_callback
#define LIVEKIT_TRACK_UNPUBLISHED_RESPONSE_DEFAULT NULL

#define LIVEKIT_SESSION_DESCRIPTION_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   type,              1) \
X(a, POINTER,  SINGULAR, STRING,   sdp,               2)
#define LIVEKIT_SESSION_DESCRIPTION_CALLBACK NULL
#define LIVEKIT_SESSION_DESCRIPTION_DEFAULT NULL

#define LIVEKIT_PARTICIPANT_UPDATE_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  participants,      1)
#define LIVEKIT_PARTICIPANT_UPDATE_CALLBACK pb_default_field_callback
#define LIVEKIT_PARTICIPANT_UPDATE_DEFAULT NULL
#define livekit_participant_update_t_participants_MSGTYPE livekit_participant_info_t

#define LIVEKIT_UPDATE_SUBSCRIPTION_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   track_sids,        1) \
X(a, STATIC,   SINGULAR, BOOL,     subscribe,         2) \
X(a, CALLBACK, REPEATED, MESSAGE,  participant_tracks,   3)
#define LIVEKIT_UPDATE_SUBSCRIPTION_CALLBACK pb_default_field_callback
#define LIVEKIT_UPDATE_SUBSCRIPTION_DEFAULT NULL
#define livekit_update_subscription_t_participant_tracks_MSGTYPE livekit_participant_tracks_t

#define LIVEKIT_UPDATE_TRACK_SETTINGS_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   track_sids,        1) \
X(a, STATIC,   SINGULAR, BOOL,     disabled,          3) \
X(a, STATIC,   SINGULAR, UENUM,    quality,           4) \
X(a, STATIC,   SINGULAR, UINT32,   width,             5) \
X(a, STATIC,   SINGULAR, UINT32,   height,            6) \
X(a, STATIC,   SINGULAR, UINT32,   fps,               7) \
X(a, STATIC,   SINGULAR, UINT32,   priority,          8)
#define LIVEKIT_UPDATE_TRACK_SETTINGS_CALLBACK pb_default_field_callback
#define LIVEKIT_UPDATE_TRACK_SETTINGS_DEFAULT NULL

#define LIVEKIT_UPDATE_LOCAL_AUDIO_TRACK_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   track_sid,         1) \
X(a, CALLBACK, REPEATED, UENUM,    features,          2)
#define LIVEKIT_UPDATE_LOCAL_AUDIO_TRACK_CALLBACK pb_default_field_callback
#define LIVEKIT_UPDATE_LOCAL_AUDIO_TRACK_DEFAULT NULL

#define LIVEKIT_UPDATE_LOCAL_VIDEO_TRACK_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   track_sid,         1) \
X(a, STATIC,   SINGULAR, UINT32,   width,             2) \
X(a, STATIC,   SINGULAR, UINT32,   height,            3)
#define LIVEKIT_UPDATE_LOCAL_VIDEO_TRACK_CALLBACK pb_default_field_callback
#define LIVEKIT_UPDATE_LOCAL_VIDEO_TRACK_DEFAULT NULL

#define LIVEKIT_LEAVE_REQUEST_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     can_reconnect,     1) \
X(a, STATIC,   SINGULAR, UENUM,    reason,            2) \
X(a, STATIC,   SINGULAR, UENUM,    action,            3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  regions,           4)
#define LIVEKIT_LEAVE_REQUEST_CALLBACK NULL
#define LIVEKIT_LEAVE_REQUEST_DEFAULT NULL
#define livekit_leave_request_t_regions_MSGTYPE livekit_region_settings_t

#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   metadata,          1) \
X(a, CALLBACK, SINGULAR, STRING,   name,              2) \
X(a, CALLBACK, REPEATED, MESSAGE,  attributes,        3) \
X(a, STATIC,   SINGULAR, UINT32,   request_id,        4)
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_CALLBACK pb_default_field_callback
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_DEFAULT NULL
#define livekit_update_participant_metadata_t_attributes_MSGTYPE livekit_update_participant_metadata_attributes_entry_t

#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_ATTRIBUTES_ENTRY_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, CALLBACK, SINGULAR, STRING,   value,             2)
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_ATTRIBUTES_ENTRY_CALLBACK pb_default_field_callback
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_ATTRIBUTES_ENTRY_DEFAULT NULL

#define LIVEKIT_ICE_SERVER_FIELDLIST(X, a) \
X(a, POINTER,  REPEATED, STRING,   urls,              1) \
X(a, POINTER,  SINGULAR, STRING,   username,          2) \
X(a, POINTER,  SINGULAR, STRING,   credential,        3)
#define LIVEKIT_ICE_SERVER_CALLBACK NULL
#define LIVEKIT_ICE_SERVER_DEFAULT NULL

#define LIVEKIT_SPEAKERS_CHANGED_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  speakers,          1)
#define LIVEKIT_SPEAKERS_CHANGED_CALLBACK pb_default_field_callback
#define LIVEKIT_SPEAKERS_CHANGED_DEFAULT NULL
#define livekit_speakers_changed_t_speakers_MSGTYPE livekit_speaker_info_t

#define LIVEKIT_ROOM_UPDATE_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  room,              1)
#define LIVEKIT_ROOM_UPDATE_CALLBACK NULL
#define LIVEKIT_ROOM_UPDATE_DEFAULT NULL
#define livekit_room_update_t_room_MSGTYPE livekit_room_t

#define LIVEKIT_CONNECTION_QUALITY_INFO_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   participant_sid,   1) \
X(a, STATIC,   SINGULAR, UENUM,    quality,           2) \
X(a, STATIC,   SINGULAR, FLOAT,    score,             3)
#define LIVEKIT_CONNECTION_QUALITY_INFO_CALLBACK pb_default_field_callback
#define LIVEKIT_CONNECTION_QUALITY_INFO_DEFAULT NULL

#define LIVEKIT_CONNECTION_QUALITY_UPDATE_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  updates,           1)
#define LIVEKIT_CONNECTION_QUALITY_UPDATE_CALLBACK pb_default_field_callback
#define LIVEKIT_CONNECTION_QUALITY_UPDATE_DEFAULT NULL
#define livekit_connection_quality_update_t_updates_MSGTYPE livekit_connection_quality_info_t

#define LIVEKIT_STREAM_STATE_INFO_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   participant_sid,   1) \
X(a, CALLBACK, SINGULAR, STRING,   track_sid,         2) \
X(a, STATIC,   SINGULAR, UENUM,    state,             3)
#define LIVEKIT_STREAM_STATE_INFO_CALLBACK pb_default_field_callback
#define LIVEKIT_STREAM_STATE_INFO_DEFAULT NULL

#define LIVEKIT_STREAM_STATE_UPDATE_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  stream_states,     1)
#define LIVEKIT_STREAM_STATE_UPDATE_CALLBACK pb_default_field_callback
#define LIVEKIT_STREAM_STATE_UPDATE_DEFAULT NULL
#define livekit_stream_state_update_t_stream_states_MSGTYPE livekit_stream_state_info_t

#define LIVEKIT_SUBSCRIBED_QUALITY_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    quality,           1) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           2)
#define LIVEKIT_SUBSCRIBED_QUALITY_CALLBACK NULL
#define LIVEKIT_SUBSCRIBED_QUALITY_DEFAULT NULL

#define LIVEKIT_SUBSCRIBED_CODEC_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   codec,             1) \
X(a, CALLBACK, REPEATED, MESSAGE,  qualities,         2)
#define LIVEKIT_SUBSCRIBED_CODEC_CALLBACK pb_default_field_callback
#define LIVEKIT_SUBSCRIBED_CODEC_DEFAULT NULL
#define livekit_subscribed_codec_t_qualities_MSGTYPE livekit_subscribed_quality_t

#define LIVEKIT_SUBSCRIBED_QUALITY_UPDATE_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   track_sid,         1) \
X(a, CALLBACK, REPEATED, MESSAGE,  subscribed_qualities,   2) \
X(a, CALLBACK, REPEATED, MESSAGE,  subscribed_codecs,   3)
#define LIVEKIT_SUBSCRIBED_QUALITY_UPDATE_CALLBACK pb_default_field_callback
#define LIVEKIT_SUBSCRIBED_QUALITY_UPDATE_DEFAULT NULL
#define livekit_subscribed_quality_update_t_subscribed_qualities_MSGTYPE livekit_subscribed_quality_t
#define livekit_subscribed_quality_update_t_subscribed_codecs_MSGTYPE livekit_subscribed_codec_t

#define LIVEKIT_TRACK_PERMISSION_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   participant_sid,   1) \
X(a, STATIC,   SINGULAR, BOOL,     all_tracks,        2) \
X(a, CALLBACK, REPEATED, STRING,   track_sids,        3) \
X(a, CALLBACK, SINGULAR, STRING,   participant_identity,   4)
#define LIVEKIT_TRACK_PERMISSION_CALLBACK pb_default_field_callback
#define LIVEKIT_TRACK_PERMISSION_DEFAULT NULL

#define LIVEKIT_SUBSCRIPTION_PERMISSION_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     all_participants,   1) \
X(a, CALLBACK, REPEATED, MESSAGE,  track_permissions,   2)
#define LIVEKIT_SUBSCRIPTION_PERMISSION_CALLBACK pb_default_field_callback
#define LIVEKIT_SUBSCRIPTION_PERMISSION_DEFAULT NULL
#define livekit_subscription_permission_t_track_permissions_MSGTYPE livekit_track_permission_t

#define LIVEKIT_SUBSCRIPTION_PERMISSION_UPDATE_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   participant_sid,   1) \
X(a, CALLBACK, SINGULAR, STRING,   track_sid,         2) \
X(a, STATIC,   SINGULAR, BOOL,     allowed,           3)
#define LIVEKIT_SUBSCRIPTION_PERMISSION_UPDATE_CALLBACK pb_default_field_callback
#define LIVEKIT_SUBSCRIPTION_PERMISSION_UPDATE_DEFAULT NULL

#define LIVEKIT_ROOM_MOVED_RESPONSE_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  room,              1) \
X(a, CALLBACK, SINGULAR, STRING,   token,             2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  participant,       3) \
X(a, CALLBACK, REPEATED, MESSAGE,  other_participants,   4)
#define LIVEKIT_ROOM_MOVED_RESPONSE_CALLBACK pb_default_field_callback
#define LIVEKIT_ROOM_MOVED_RESPONSE_DEFAULT NULL
#define livekit_room_moved_response_t_room_MSGTYPE livekit_room_t
#define livekit_room_moved_response_t_participant_MSGTYPE livekit_participant_info_t
#define livekit_room_moved_response_t_other_participants_MSGTYPE livekit_participant_info_t

#define LIVEKIT_SYNC_STATE_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  answer,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  subscription,      2) \
X(a, CALLBACK, REPEATED, MESSAGE,  publish_tracks,    3) \
X(a, CALLBACK, REPEATED, MESSAGE,  data_channels,     4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  offer,             5) \
X(a, CALLBACK, REPEATED, STRING,   track_sids_disabled,   6)
#define LIVEKIT_SYNC_STATE_CALLBACK pb_default_field_callback
#define LIVEKIT_SYNC_STATE_DEFAULT NULL
#define livekit_sync_state_t_answer_MSGTYPE livekit_session_description_t
#define livekit_sync_state_t_subscription_MSGTYPE livekit_update_subscription_t
#define livekit_sync_state_t_publish_tracks_MSGTYPE livekit_track_published_response_t
#define livekit_sync_state_t_data_channels_MSGTYPE livekit_data_channel_info_t
#define livekit_sync_state_t_offer_MSGTYPE livekit_session_description_t

#define LIVEKIT_DATA_CHANNEL_INFO_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   label,             1) \
X(a, STATIC,   SINGULAR, UINT32,   id,                2) \
X(a, STATIC,   SINGULAR, UENUM,    target,            3)
#define LIVEKIT_DATA_CHANNEL_INFO_CALLBACK pb_default_field_callback
#define LIVEKIT_DATA_CHANNEL_INFO_DEFAULT NULL

#define LIVEKIT_SIMULATE_SCENARIO_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    INT32,    (scenario,speaker_update,scenario.speaker_update),   1) \
X(a, STATIC,   ONEOF,    BOOL,     (scenario,node_failure,scenario.node_failure),   2) \
X(a, STATIC,   ONEOF,    BOOL,     (scenario,migration,scenario.migration),   3) \
X(a, STATIC,   ONEOF,    BOOL,     (scenario,server_leave,scenario.server_leave),   4) \
X(a, STATIC,   ONEOF,    UENUM,    (scenario,switch_candidate_protocol,scenario.switch_candidate_protocol),   5) \
X(a, STATIC,   ONEOF,    INT64,    (scenario,subscriber_bandwidth,scenario.subscriber_bandwidth),   6) \
X(a, STATIC,   ONEOF,    BOOL,     (scenario,disconnect_signal_on_resume,scenario.disconnect_signal_on_resume),   7) \
X(a, STATIC,   ONEOF,    BOOL,     (scenario,disconnect_signal_on_resume_no_messages,scenario.disconnect_signal_on_resume_no_messages),   8) \
X(a, STATIC,   ONEOF,    BOOL,     (scenario,leave_request_full_reconnect,scenario.leave_request_full_reconnect),   9)
#define LIVEKIT_SIMULATE_SCENARIO_CALLBACK NULL
#define LIVEKIT_SIMULATE_SCENARIO_DEFAULT NULL

#define LIVEKIT_PING_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    timestamp,         1) \
X(a, STATIC,   SINGULAR, INT64,    rtt,               2)
#define LIVEKIT_PING_CALLBACK NULL
#define LIVEKIT_PING_DEFAULT NULL

#define LIVEKIT_PONG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    last_ping_timestamp,   1) \
X(a, STATIC,   SINGULAR, INT64,    timestamp,         2)
#define LIVEKIT_PONG_CALLBACK NULL
#define LIVEKIT_PONG_DEFAULT NULL

#define LIVEKIT_REGION_SETTINGS_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  regions,           1)
#define LIVEKIT_REGION_SETTINGS_CALLBACK pb_default_field_callback
#define LIVEKIT_REGION_SETTINGS_DEFAULT NULL
#define livekit_region_settings_t_regions_MSGTYPE livekit_region_info_t

#define LIVEKIT_REGION_INFO_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   region,            1) \
X(a, CALLBACK, SINGULAR, STRING,   url,               2) \
X(a, STATIC,   SINGULAR, INT64,    distance,          3)
#define LIVEKIT_REGION_INFO_CALLBACK pb_default_field_callback
#define LIVEKIT_REGION_INFO_DEFAULT NULL

#define LIVEKIT_SUBSCRIPTION_RESPONSE_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   track_sid,         1) \
X(a, STATIC,   SINGULAR, UENUM,    err,               2)
#define LIVEKIT_SUBSCRIPTION_RESPONSE_CALLBACK pb_default_field_callback
#define LIVEKIT_SUBSCRIPTION_RESPONSE_DEFAULT NULL

#define LIVEKIT_REQUEST_RESPONSE_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   request_id,        1) \
X(a, STATIC,   SINGULAR, UENUM,    reason,            2) \
X(a, CALLBACK, SINGULAR, STRING,   message,           3)
#define LIVEKIT_REQUEST_RESPONSE_CALLBACK pb_default_field_callback
#define LIVEKIT_REQUEST_RESPONSE_DEFAULT NULL

#define LIVEKIT_TRACK_SUBSCRIBED_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   track_sid,         1)
#define LIVEKIT_TRACK_SUBSCRIBED_CALLBACK pb_default_field_callback
#define LIVEKIT_TRACK_SUBSCRIBED_DEFAULT NULL

extern const pb_msgdesc_t livekit_signal_request_t_msg;
extern const pb_msgdesc_t livekit_signal_response_t_msg;
extern const pb_msgdesc_t livekit_simulcast_codec_t_msg;
extern const pb_msgdesc_t livekit_add_track_request_t_msg;
extern const pb_msgdesc_t livekit_trickle_request_t_msg;
extern const pb_msgdesc_t livekit_mute_track_request_t_msg;
extern const pb_msgdesc_t livekit_join_response_t_msg;
extern const pb_msgdesc_t livekit_reconnect_response_t_msg;
extern const pb_msgdesc_t livekit_track_published_response_t_msg;
extern const pb_msgdesc_t livekit_track_unpublished_response_t_msg;
extern const pb_msgdesc_t livekit_session_description_t_msg;
extern const pb_msgdesc_t livekit_participant_update_t_msg;
extern const pb_msgdesc_t livekit_update_subscription_t_msg;
extern const pb_msgdesc_t livekit_update_track_settings_t_msg;
extern const pb_msgdesc_t livekit_update_local_audio_track_t_msg;
extern const pb_msgdesc_t livekit_update_local_video_track_t_msg;
extern const pb_msgdesc_t livekit_leave_request_t_msg;
extern const pb_msgdesc_t livekit_update_participant_metadata_t_msg;
extern const pb_msgdesc_t livekit_update_participant_metadata_attributes_entry_t_msg;
extern const pb_msgdesc_t livekit_ice_server_t_msg;
extern const pb_msgdesc_t livekit_speakers_changed_t_msg;
extern const pb_msgdesc_t livekit_room_update_t_msg;
extern const pb_msgdesc_t livekit_connection_quality_info_t_msg;
extern const pb_msgdesc_t livekit_connection_quality_update_t_msg;
extern const pb_msgdesc_t livekit_stream_state_info_t_msg;
extern const pb_msgdesc_t livekit_stream_state_update_t_msg;
extern const pb_msgdesc_t livekit_subscribed_quality_t_msg;
extern const pb_msgdesc_t livekit_subscribed_codec_t_msg;
extern const pb_msgdesc_t livekit_subscribed_quality_update_t_msg;
extern const pb_msgdesc_t livekit_track_permission_t_msg;
extern const pb_msgdesc_t livekit_subscription_permission_t_msg;
extern const pb_msgdesc_t livekit_subscription_permission_update_t_msg;
extern const pb_msgdesc_t livekit_room_moved_response_t_msg;
extern const pb_msgdesc_t livekit_sync_state_t_msg;
extern const pb_msgdesc_t livekit_data_channel_info_t_msg;
extern const pb_msgdesc_t livekit_simulate_scenario_t_msg;
extern const pb_msgdesc_t livekit_ping_t_msg;
extern const pb_msgdesc_t livekit_pong_t_msg;
extern const pb_msgdesc_t livekit_region_settings_t_msg;
extern const pb_msgdesc_t livekit_region_info_t_msg;
extern const pb_msgdesc_t livekit_subscription_response_t_msg;
extern const pb_msgdesc_t livekit_request_response_t_msg;
extern const pb_msgdesc_t livekit_track_subscribed_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define LIVEKIT_SIGNAL_REQUEST_FIELDS &livekit_signal_request_t_msg
#define LIVEKIT_SIGNAL_RESPONSE_FIELDS &livekit_signal_response_t_msg
#define LIVEKIT_SIMULCAST_CODEC_FIELDS &livekit_simulcast_codec_t_msg
#define LIVEKIT_ADD_TRACK_REQUEST_FIELDS &livekit_add_track_request_t_msg
#define LIVEKIT_TRICKLE_REQUEST_FIELDS &livekit_trickle_request_t_msg
#define LIVEKIT_MUTE_TRACK_REQUEST_FIELDS &livekit_mute_track_request_t_msg
#define LIVEKIT_JOIN_RESPONSE_FIELDS &livekit_join_response_t_msg
#define LIVEKIT_RECONNECT_RESPONSE_FIELDS &livekit_reconnect_response_t_msg
#define LIVEKIT_TRACK_PUBLISHED_RESPONSE_FIELDS &livekit_track_published_response_t_msg
#define LIVEKIT_TRACK_UNPUBLISHED_RESPONSE_FIELDS &livekit_track_unpublished_response_t_msg
#define LIVEKIT_SESSION_DESCRIPTION_FIELDS &livekit_session_description_t_msg
#define LIVEKIT_PARTICIPANT_UPDATE_FIELDS &livekit_participant_update_t_msg
#define LIVEKIT_UPDATE_SUBSCRIPTION_FIELDS &livekit_update_subscription_t_msg
#define LIVEKIT_UPDATE_TRACK_SETTINGS_FIELDS &livekit_update_track_settings_t_msg
#define LIVEKIT_UPDATE_LOCAL_AUDIO_TRACK_FIELDS &livekit_update_local_audio_track_t_msg
#define LIVEKIT_UPDATE_LOCAL_VIDEO_TRACK_FIELDS &livekit_update_local_video_track_t_msg
#define LIVEKIT_LEAVE_REQUEST_FIELDS &livekit_leave_request_t_msg
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_FIELDS &livekit_update_participant_metadata_t_msg
#define LIVEKIT_UPDATE_PARTICIPANT_METADATA_ATTRIBUTES_ENTRY_FIELDS &livekit_update_participant_metadata_attributes_entry_t_msg
#define LIVEKIT_ICE_SERVER_FIELDS &livekit_ice_server_t_msg
#define LIVEKIT_SPEAKERS_CHANGED_FIELDS &livekit_speakers_changed_t_msg
#define LIVEKIT_ROOM_UPDATE_FIELDS &livekit_room_update_t_msg
#define LIVEKIT_CONNECTION_QUALITY_INFO_FIELDS &livekit_connection_quality_info_t_msg
#define LIVEKIT_CONNECTION_QUALITY_UPDATE_FIELDS &livekit_connection_quality_update_t_msg
#define LIVEKIT_STREAM_STATE_INFO_FIELDS &livekit_stream_state_info_t_msg
#define LIVEKIT_STREAM_STATE_UPDATE_FIELDS &livekit_stream_state_update_t_msg
#define LIVEKIT_SUBSCRIBED_QUALITY_FIELDS &livekit_subscribed_quality_t_msg
#define LIVEKIT_SUBSCRIBED_CODEC_FIELDS &livekit_subscribed_codec_t_msg
#define LIVEKIT_SUBSCRIBED_QUALITY_UPDATE_FIELDS &livekit_subscribed_quality_update_t_msg
#define LIVEKIT_TRACK_PERMISSION_FIELDS &livekit_track_permission_t_msg
#define LIVEKIT_SUBSCRIPTION_PERMISSION_FIELDS &livekit_subscription_permission_t_msg
#define LIVEKIT_SUBSCRIPTION_PERMISSION_UPDATE_FIELDS &livekit_subscription_permission_update_t_msg
#define LIVEKIT_ROOM_MOVED_RESPONSE_FIELDS &livekit_room_moved_response_t_msg
#define LIVEKIT_SYNC_STATE_FIELDS &livekit_sync_state_t_msg
#define LIVEKIT_DATA_CHANNEL_INFO_FIELDS &livekit_data_channel_info_t_msg
#define LIVEKIT_SIMULATE_SCENARIO_FIELDS &livekit_simulate_scenario_t_msg
#define LIVEKIT_PING_FIELDS &livekit_ping_t_msg
#define LIVEKIT_PONG_FIELDS &livekit_pong_t_msg
#define LIVEKIT_REGION_SETTINGS_FIELDS &livekit_region_settings_t_msg
#define LIVEKIT_REGION_INFO_FIELDS &livekit_region_info_t_msg
#define LIVEKIT_SUBSCRIPTION_RESPONSE_FIELDS &livekit_subscription_response_t_msg
#define LIVEKIT_REQUEST_RESPONSE_FIELDS &livekit_request_response_t_msg
#define LIVEKIT_TRACK_SUBSCRIBED_FIELDS &livekit_track_subscribed_t_msg

/* Maximum encoded size of messages (where known) */
/* livekit_SignalRequest_size depends on runtime parameters */
/* livekit_SignalResponse_size depends on runtime parameters */
/* livekit_SimulcastCodec_size depends on runtime parameters */
/* livekit_AddTrackRequest_size depends on runtime parameters */
/* livekit_TrickleRequest_size depends on runtime parameters */
/* livekit_MuteTrackRequest_size depends on runtime parameters */
/* livekit_JoinResponse_size depends on runtime parameters */
/* livekit_ReconnectResponse_size depends on runtime parameters */
/* livekit_TrackPublishedResponse_size depends on runtime parameters */
/* livekit_TrackUnpublishedResponse_size depends on runtime parameters */
/* livekit_SessionDescription_size depends on runtime parameters */
/* livekit_ParticipantUpdate_size depends on runtime parameters */
/* livekit_UpdateSubscription_size depends on runtime parameters */
/* livekit_UpdateTrackSettings_size depends on runtime parameters */
/* livekit_UpdateLocalAudioTrack_size depends on runtime parameters */
/* livekit_UpdateLocalVideoTrack_size depends on runtime parameters */
/* livekit_LeaveRequest_size depends on runtime parameters */
/* livekit_UpdateParticipantMetadata_size depends on runtime parameters */
/* livekit_UpdateParticipantMetadata_AttributesEntry_size depends on runtime parameters */
/* livekit_ICEServer_size depends on runtime parameters */
/* livekit_SpeakersChanged_size depends on runtime parameters */
/* livekit_ConnectionQualityInfo_size depends on runtime parameters */
/* livekit_ConnectionQualityUpdate_size depends on runtime parameters */
/* livekit_StreamStateInfo_size depends on runtime parameters */
/* livekit_StreamStateUpdate_size depends on runtime parameters */
/* livekit_SubscribedCodec_size depends on runtime parameters */
/* livekit_SubscribedQualityUpdate_size depends on runtime parameters */
/* livekit_TrackPermission_size depends on runtime parameters */
/* livekit_SubscriptionPermission_size depends on runtime parameters */
/* livekit_SubscriptionPermissionUpdate_size depends on runtime parameters */
/* livekit_RoomMovedResponse_size depends on runtime parameters */
/* livekit_SyncState_size depends on runtime parameters */
/* livekit_DataChannelInfo_size depends on runtime parameters */
/* livekit_RegionSettings_size depends on runtime parameters */
/* livekit_RegionInfo_size depends on runtime parameters */
/* livekit_SubscriptionResponse_size depends on runtime parameters */
/* livekit_RequestResponse_size depends on runtime parameters */
/* livekit_TrackSubscribed_size depends on runtime parameters */
#if defined(livekit_Room_size)
#define LIVEKIT_ROOM_UPDATE_SIZE                 (6 + livekit_Room_size)
#endif
#define LIVEKIT_LIVEKIT_RTC_PB_H_MAX_SIZE        LIVEKIT_PING_SIZE
#define LIVEKIT_PING_SIZE                        22
#define LIVEKIT_PONG_SIZE                        22
#define LIVEKIT_SIMULATE_SCENARIO_SIZE           11
#define LIVEKIT_SUBSCRIBED_QUALITY_SIZE          4

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
